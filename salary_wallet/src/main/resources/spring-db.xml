<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/tx
			http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	   		">
	<tx:annotation-driven/>
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${db.url}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />

		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${db.initial_size}" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="${db.max_active}" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${db.min_idle}" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${db.max_wait}" />

		<property name="validationQuery" value="SELECT 1 FROM DUAL" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${db.time_between_eviction_runs_millis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${db.min_evictable_idle_timemillis}" />

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="${db.remove_abandoned}" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="${db.remove_abandoned_timeout}" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="${db.log_abandoned}" />

		<!-- 监控数据库 -->
		<property name="filters" value="mergeStat" />
	</bean>
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation">
			<value>classpath:SqlMapConfig.xml</value>
		</property>
		<property name="mapperLocations">
			<value>classpath:com/jrmf/**/*Dao.xml</value>
		</property>
		<!--<property name="plugins">-->
		<!--<array>-->
		<!--<ref bean="dbFieldEncryptInterceptor" />-->
		<!--</array>-->
		<!--</property>-->
	</bean>
	<!-- scan for mappers and let them be autowired -->
	<!--<bean name="mapperscan" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jrmf.persistence" />
		<property name="annotationClass" value="org.apache.ibatis.annotations.Mapper" />
	</bean>-->

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<!-- 开启事务注解驱动 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />

	<!-- 事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 加载spring的工具类 -->
	<bean id="SpringContextHelper" class="com.jrmf.utils.jdbc.SpringContextHelper"/>

	<!-- 配置jdbcTemplate -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"/>
	</bean>
</beans>